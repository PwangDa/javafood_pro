<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.javafood">

	<select id="viewComment" resultType="commentDTO" parameterType="String">
		SELECT LEVEL, articleNO, parentNO, comment_num, comment_id, comment_cont, comment_date, myimg
		from comment_com
		WHERE artistname= #{artistname}
		START WITH parentNO=0
		CONNECT BY PRIOR articleNO=parentNO
		ORDER SIBLINGS BY articleNO DESC
	</select>
	
	<select id="viewArtist" resultType="albumDTO" parameterType="String">
		SELECT * FROM ALBUM a
		LEFT JOIN INTOALBUM i ON (a.ALBUM_NAME = i.ALBUM_NAME)
		WHERE i.MUSIC_NUM = 1 AND ARTISTNAME = #{artistname}
	</select>
	
	<select id="plusArtist" resultType="songPlusDTO" parameterType="String">
		insert into album
		(album_num, album_cover, album_name, album_into, artistname, artist_img, artist_info)";
		values(#{album_num}, #{album_cover}, #{album_name}, #{album_into}, #{artistname}, #{artist_img}, #{artist_info})
	</select>
	
	<select id="viewAlbum" resultType="albumDTO" parameterType="String">
		SELECT * FROM ALBUM a
		LEFT JOIN INTOALBUM i ON (a.ALBUM_NAME = i.ALBUM_NAME)
		WHERE a.ALBUM_NAME = #{album_name}
	</select>
	
	<!-- 인기차트 -->
	<select id="getChart" resultType="chartDTO" parameterType="String">
		
			SELECT * FROM ( 
				SELECT rownum num, genre.* FROM 
					( SELECT RANK() OVER (ORDER BY FAMOUS DESC) 
						AS RANKING, a.* FROM ( SELECT (HITS *1) + (LIKES * 1.5) 
							AS FAMOUS, s.*  FROM Genre s ) a ) genre WHERE country =?)
			WHERE num <![CDATA[>=]]> #{start} AND rnum<![CDATA[<=]]> #{end} 

		<foreach item="not" collection="list" open="(" separator="," close=")">
			#{not}
		</foreach>
	</select>
	
	<!-- 인기차트 페이징 -->
	<select id="totalpage" resultType="int">
		SELECT count(*) cnt FROM  Genre
	</select>
	
	<!-- 장르별-->
	<select id="genre" resultType="genreDTO" parameterType="java.util.HashMap">
		SELECT * FROM (
			SELECT rownum AS rnum, genre.* FROM (
				SELECT * FROM genre
				WHERE BYGENRE = #{genre}
				ORDER BY SONGNUMBER
			) genre
		)
	WHERE rnum <![CDATA[>=]]> #{start} AND rnum<![CDATA[<=]]> #{end}
	</select>
	
	<!-- 페이징 -->
	<select id="pagetotal" resultType="int">
		SELECT count(*) cnt FROM  Genre
	</select>
	
	<!-- 최신 TOP100-->
	<select id="song" resultType="genreDTO">
		SELECT * FROM song1
	</select>
	<!-- 	회원 전체 목록 리스트 -->
	<select id="login" resultType="loginDTO">
		SELECT * FROM login
	</select>
	<!-- 	회원 로그인 정보 확인-->
	<update id="newures" parameterType="loginDTO">
		insert into login values('#{id},#{pwd},#{nic},#{pn},#{phone},#{email},#{img}');
	</update>
	
	
	<!-- 플레이 리스트 불러오기 -->
	<select id="selectPlayList" resultType="playListDTO" parameterType="String">
		SELECT
			pl_title, pl_id
		FROM
			playList
		WHERE
			id2 = #{id}
	</select>
	
	<!-- 플레이 리스트 내역(Content) 불러오기 -->
	<select id="selectPlayListContent" resultType="playListDTO" parameterType="String">
	SELECT
			plc.pl_id, plc.listNumber, plc.songName, plc.songNumber, g.Link, pl.pl_title, pl.pl_explain, g.imageLink, g.artistName, g.songName
		FROM
			playList_Content plc, genre g, playList pl
		WHERE
			plc.songNumber = g.songNumber
			AND
			pl.pl_id = plc.pl_id
			AND
			plc.pl_id = #{pl_id}
	</select>
</mapper>